<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Area/City" xml:space="preserve">
    <value>Area/City</value>
  </data>
  <data name="Attachment 1" xml:space="preserve">
    <value>Attachment 1</value>
  </data>
  <data name="Attachment 2" xml:space="preserve">
    <value>Attachment 2</value>
  </data>
  <data name="Attachment 3" xml:space="preserve">
    <value>Attachment 3</value>
  </data>
  <data name="Attachment(1) Title" xml:space="preserve">
    <value>Attachment(1) Title</value>
  </data>
  <data name="Attachment(2) Title" xml:space="preserve">
    <value>Attachment(2) Title</value>
  </data>
  <data name="Attachment(3) Title" xml:space="preserve">
    <value>Attachment(3) Title</value>
  </data>
  <data name="Breadwinner Type" xml:space="preserve">
    <value>Breadwinner Type</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="Confirm Password" xml:space="preserve">
    <value>Confirm Password</value>
  </data>
  <data name="Date of Birth" xml:space="preserve">
    <value>Date of Birth</value>
  </data>
  <data name="Disability Size" xml:space="preserve">
    <value>Disability Size</value>
  </data>
  <data name="Disability Type" xml:space="preserve">
    <value>Disability Type</value>
  </data>
  <data name="District" xml:space="preserve">
    <value>District</value>
  </data>
  <data name="Email Address" xml:space="preserve">
    <value>Email Address</value>
  </data>
  <data name="Family members count" xml:space="preserve">
    <value>Family members count</value>
  </data>
  <data name="Family Name" xml:space="preserve">
    <value>Family Name</value>
  </data>
  <data name="Father ID Number" xml:space="preserve">
    <value>Father ID Number</value>
  </data>
  <data name="Father Name" xml:space="preserve">
    <value>Father Name</value>
  </data>
  <data name="First Name" xml:space="preserve">
    <value>First Name</value>
  </data>
  <data name="Gender" xml:space="preserve">
    <value>Gender</value>
  </data>
  <data name="Grand Father Name" xml:space="preserve">
    <value>Grand Father Name</value>
  </data>
  <data name="Health Attachment" xml:space="preserve">
    <value>Health Attachment</value>
  </data>
  <data name="Health Status" xml:space="preserve">
    <value>Health Status</value>
  </data>
  <data name="HealthAtt2" xml:space="preserve">
    <value>Health Attachment 2</value>
  </data>
  <data name="HealthAtt3" xml:space="preserve">
    <value>Health Attachmetn 3</value>
  </data>
  <data name="House Nature" xml:space="preserve">
    <value>House Nature</value>
  </data>
  <data name="House Size" xml:space="preserve">
    <value>House Size</value>
    <comment>"House Size (m2)</comment>
  </data>
  <data name="House Type" xml:space="preserve">
    <value>House Type</value>
  </data>
  <data name="Husband/Wife Id Number" xml:space="preserve">
    <value>Husband/Wife Id Number</value>
  </data>
  <data name="ID Number" xml:space="preserve">
    <value>ID Number</value>
  </data>
  <data name="Income Value" xml:space="preserve">
    <value>Income Value</value>
  </data>
  <data name="Interest Type" xml:space="preserve">
    <value>Interest Type</value>
  </data>
  <data name="Is there income source?" xml:space="preserve">
    <value>Is there income source?</value>
  </data>
  <data name="Last Login" xml:space="preserve">
    <value>Last Login</value>
  </data>
  <data name="Members Less 18" xml:space="preserve">
    <value>Family members count age more than 18 (Live in family)</value>
    <comment>Family members count age more than 18 (Live in family)</comment>
  </data>
  <data name="Members More 18" xml:space="preserve">
    <value>Family members older than 18</value>
  </data>
  <data name="Mobile Number" xml:space="preserve">
    <value>Mobile Number</value>
  </data>
  <data name="Mobile Number 2" xml:space="preserve">
    <value>Mobile Number 2</value>
  </data>
  <data name="Mother ID Number" xml:space="preserve">
    <value>Mother ID Number</value>
  </data>
  <data name="Near To" xml:space="preserve">
    <value>Near To</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Profile Picture" xml:space="preserve">
    <value>Profile Picture</value>
  </data>
  <data name="Property Type" xml:space="preserve">
    <value>Property Type</value>
  </data>
  <data name="Registration Date" xml:space="preserve">
    <value>Registration Date</value>
  </data>
  <data name="Sick Nature" xml:space="preserve">
    <value>Sick Nature</value>
  </data>
  <data name="Social Status" xml:space="preserve">
    <value>Social Status</value>
  </data>
  <data name="Source of Income" xml:space="preserve">
    <value>Source of Income</value>
  </data>
  <data name="Street" xml:space="preserve">
    <value>Street</value>
  </data>
  <data name="Telephone" xml:space="preserve">
    <value>Telephone</value>
  </data>
  <data name="The name of breadwinner" xml:space="preserve">
    <value>The name of breadwinner</value>
  </data>
  <data name="Training Name" xml:space="preserve">
    <value>Training Name</value>
  </data>
</root>